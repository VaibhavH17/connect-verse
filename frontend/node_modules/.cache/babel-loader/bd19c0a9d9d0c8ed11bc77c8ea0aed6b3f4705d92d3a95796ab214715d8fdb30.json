{"ast":null,"code":"#!/usr/bin/env node\n\n// src/index.ts\nimport { existsSync, promises as fs2 } from \"fs\";\nimport path2 from \"path\";\nimport { Command } from \"commander\";\nimport { execa } from \"execa\";\nimport ora from \"ora\";\nimport prompts from \"prompts\";\n\n// src/utils/get-components.ts\nimport fetch from \"node-fetch\";\nimport * as z from \"zod\";\nvar baseUrl = process.env.COMPONENTS_BASE_URL ?? \"https://ui.shadcn.com\";\nvar componentSchema = z.object({\n  name: z.string(),\n  dependencies: z.array(z.string()).optional(),\n  files: z.array(z.object({\n    name: z.string(),\n    dir: z.string(),\n    content: z.string()\n  }))\n});\nvar componentsSchema = z.array(componentSchema);\nasync function getAvailableComponents() {\n  try {\n    const response = await fetch(`${baseUrl}/api/components`);\n    const components = await response.json();\n    return componentsSchema.parse(components);\n  } catch (error) {\n    throw new Error(`Failed to fetch components from ${baseUrl}/api/components.`);\n  }\n}\n\n// src/utils/get-package-info.ts\nimport path from \"path\";\nimport fs from \"fs-extra\";\nfunction getPackageInfo() {\n  const packageJsonPath = path.join(\"package.json\");\n  return fs.readJSONSync(packageJsonPath);\n}\n\n// src/utils/get-package-manager.ts\nfunction getPackageManager() {\n  const userAgent = process.env.npm_config_user_agent;\n  if (!userAgent) {\n    return \"npm\";\n  }\n  if (userAgent.startsWith(\"yarn\")) {\n    return \"yarn\";\n  }\n  if (userAgent.startsWith(\"pnpm\")) {\n    return \"pnpm\";\n  }\n  return \"npm\";\n}\n\n// src/utils/logger.ts\nimport chalk from \"chalk\";\nvar logger = {\n  error(...args) {\n    console.log(chalk.red(...args));\n  },\n  warn(...args) {\n    console.log(chalk.yellow(...args));\n  },\n  info(...args) {\n    console.log(chalk.cyan(...args));\n  },\n  success(...args) {\n    console.log(chalk.green(...args));\n  }\n};\n\n// src/index.ts\nprocess.on(\"SIGINT\", () => process.exit(0));\nprocess.on(\"SIGTERM\", () => process.exit(0));\nasync function main() {\n  const packageInfo = await getPackageInfo();\n  const program = new Command().name(\"@shadcn/ui\").description(\"Add @shadcn/ui components to your project\").version(packageInfo.version || \"1.0.0\", \"-v, --version\", \"display the version number\");\n  program.command(\"add\").description(\"add components to your project\").action(async () => {\n    logger.warn(\"Running the following command will overwrite existing files.\");\n    logger.warn(\"Make sure you have committed your changes before proceeding.\");\n    logger.warn(\"\");\n    const {\n      components,\n      dir\n    } = await promptForAddOptions();\n    if (!components?.length) {\n      logger.warn(\"No components selected. Nothing to install.\");\n      process.exit(0);\n    }\n    const destinationDir = path2.resolve(dir);\n    if (!existsSync(destinationDir)) {\n      const spinner = ora(`Creating ${dir}...`).start();\n      await fs2.mkdir(destinationDir, {\n        recursive: true\n      });\n      spinner.succeed();\n    }\n    const packageManager = getPackageManager();\n    logger.success(`Installing components...`);\n    for (const component of components) {\n      const componentSpinner = ora(`${component.name}...`).start();\n      for (const file of component.files) {\n        const filePath = path2.resolve(dir, file.name);\n        await fs2.writeFile(filePath, file.content);\n      }\n      if (component.dependencies?.length) {\n        const dependencies = component.dependencies.join(\" \");\n        await execa(packageManager, [packageManager === \"npm\" ? \"install\" : \"add\", dependencies]);\n      }\n      componentSpinner.succeed(component.name);\n    }\n  });\n  program.parse();\n}\nasync function promptForAddOptions() {\n  const availableComponents = await getAvailableComponents();\n  if (!availableComponents?.length) {\n    logger.error(\"An error occurred while fetching components. Please try again.\");\n    process.exit(0);\n  }\n  const options = await prompts([{\n    type: \"multiselect\",\n    name: \"components\",\n    message: \"Which component(s) would you like to add?\",\n    hint: \"Space to select. A to select all. I to invert selection.\",\n    instructions: false,\n    choices: availableComponents.map(component => ({\n      title: component.name,\n      value: component\n    }))\n  }, {\n    type: \"text\",\n    name: \"dir\",\n    message: \"Where would you like to install the component(s)?\",\n    initial: \"./components/ui\"\n  }]);\n  return options;\n}\nmain();","map":{"version":3,"names":["existsSync","promises","fs2","path2","Command","execa","ora","prompts","fetch","z","baseUrl","process","env","COMPONENTS_BASE_URL","componentSchema","object","name","string","dependencies","array","optional","files","dir","content","componentsSchema","getAvailableComponents","response","components","json","parse","error","Error","path","fs","getPackageInfo","packageJsonPath","join","readJSONSync","getPackageManager","userAgent","npm_config_user_agent","startsWith","chalk","logger","args","console","log","red","warn","yellow","info","cyan","success","green","on","exit","main","packageInfo","program","description","version","command","action","promptForAddOptions","length","destinationDir","resolve","spinner","start","mkdir","recursive","succeed","packageManager","component","componentSpinner","file","filePath","writeFile","availableComponents","options","type","message","hint","instructions","choices","map","title","value","initial"],"sources":["/Users/vaibhavh/Desktop/connectVerse/connect-verse-frontend/node_modules/@shadcn/ui/src/index.ts","/Users/vaibhavh/Desktop/connectVerse/connect-verse-frontend/node_modules/@shadcn/ui/src/utils/get-components.ts","/Users/vaibhavh/Desktop/connectVerse/connect-verse-frontend/node_modules/@shadcn/ui/src/utils/get-package-info.ts","/Users/vaibhavh/Desktop/connectVerse/connect-verse-frontend/node_modules/@shadcn/ui/src/utils/get-package-manager.ts","/Users/vaibhavh/Desktop/connectVerse/connect-verse-frontend/node_modules/@shadcn/ui/src/utils/logger.ts"],"sourcesContent":["#!/usr/bin/env node\nimport { existsSync, promises as fs } from \"fs\"\nimport path from \"path\"\nimport { Command } from \"commander\"\nimport { execa } from \"execa\"\nimport ora from \"ora\"\nimport prompts from \"prompts\"\n\nimport { Component, getAvailableComponents } from \"./utils/get-components\"\nimport { getPackageInfo } from \"./utils/get-package-info\"\nimport { getPackageManager } from \"./utils/get-package-manager\"\nimport { logger } from \"./utils/logger\"\n\nprocess.on(\"SIGINT\", () => process.exit(0))\nprocess.on(\"SIGTERM\", () => process.exit(0))\n\nasync function main() {\n  const packageInfo = await getPackageInfo()\n\n  const program = new Command()\n    .name(\"@shadcn/ui\")\n    .description(\"Add @shadcn/ui components to your project\")\n    .version(\n      packageInfo.version || \"1.0.0\",\n      \"-v, --version\",\n      \"display the version number\"\n    )\n\n  program\n    .command(\"add\")\n    .description(\"add components to your project\")\n    .action(async () => {\n      logger.warn(\n        \"Running the following command will overwrite existing files.\"\n      )\n      logger.warn(\n        \"Make sure you have committed your changes before proceeding.\"\n      )\n      logger.warn(\"\")\n\n      const { components, dir } = await promptForAddOptions()\n      if (!components?.length) {\n        logger.warn(\"No components selected. Nothing to install.\")\n        process.exit(0)\n      }\n\n      // Create componentPath directory if it doesn't exist.\n      const destinationDir = path.resolve(dir)\n      if (!existsSync(destinationDir)) {\n        const spinner = ora(`Creating ${dir}...`).start()\n        await fs.mkdir(destinationDir, { recursive: true })\n        spinner.succeed()\n      }\n\n      const packageManager = getPackageManager()\n\n      logger.success(`Installing components...`)\n      for (const component of components) {\n        const componentSpinner = ora(`${component.name}...`).start()\n\n        // Write the files.\n        for (const file of component.files) {\n          const filePath = path.resolve(dir, file.name)\n          await fs.writeFile(filePath, file.content)\n        }\n\n        // Install dependencies.\n        if (component.dependencies?.length) {\n          const dependencies = component.dependencies.join(\" \")\n          await execa(packageManager, [\n            packageManager === \"npm\" ? \"install\" : \"add\",\n            dependencies,\n          ])\n        }\n        componentSpinner.succeed(component.name)\n      }\n    })\n\n  program.parse()\n}\n\ntype AddOptions = {\n  components: Component[]\n  dir: string\n}\n\nasync function promptForAddOptions() {\n  const availableComponents = await getAvailableComponents()\n\n  if (!availableComponents?.length) {\n    logger.error(\n      \"An error occurred while fetching components. Please try again.\"\n    )\n    process.exit(0)\n  }\n\n  const options = await prompts([\n    {\n      type: \"multiselect\",\n      name: \"components\",\n      message: \"Which component(s) would you like to add?\",\n      hint: \"Space to select. A to select all. I to invert selection.\",\n      instructions: false,\n\n      choices: availableComponents.map((component) => ({\n        title: component.name,\n        value: component,\n      })),\n    },\n    {\n      type: \"text\",\n      name: \"dir\",\n      message: \"Where would you like to install the component(s)?\",\n      initial: \"./components/ui\",\n    },\n  ])\n\n  return options as AddOptions\n}\n\nmain()\n","import fetch from \"node-fetch\"\nimport * as z from \"zod\"\n\nconst baseUrl = process.env.COMPONENTS_BASE_URL ?? \"https://ui.shadcn.com\"\n\nconst componentSchema = z.object({\n  name: z.string(),\n  dependencies: z.array(z.string()).optional(),\n  files: z.array(\n    z.object({\n      name: z.string(),\n      dir: z.string(),\n      content: z.string(),\n    })\n  ),\n})\n\nexport type Component = z.infer<typeof componentSchema>\n\nconst componentsSchema = z.array(componentSchema)\n\nexport async function getAvailableComponents() {\n  try {\n    const response = await fetch(`${baseUrl}/api/components`)\n    const components = await response.json()\n\n    return componentsSchema.parse(components)\n  } catch (error) {\n    throw new Error(\n      `Failed to fetch components from ${baseUrl}/api/components.`\n    )\n  }\n}\n","import path from \"path\"\nimport fs from \"fs-extra\"\nimport { type PackageJson } from \"type-fest\"\n\nexport function getPackageInfo() {\n  const packageJsonPath = path.join(\"package.json\")\n\n  return fs.readJSONSync(packageJsonPath) as PackageJson\n}\n","export function getPackageManager() {\n  const userAgent = process.env.npm_config_user_agent\n\n  if (!userAgent) {\n    return \"npm\"\n  }\n\n  if (userAgent.startsWith(\"yarn\")) {\n    return \"yarn\"\n  }\n\n  if (userAgent.startsWith(\"pnpm\")) {\n    return \"pnpm\"\n  }\n\n  return \"npm\"\n}\n","import chalk from \"chalk\"\n\nexport const logger = {\n  error(...args: unknown[]) {\n    console.log(chalk.red(...args))\n  },\n  warn(...args: unknown[]) {\n    console.log(chalk.yellow(...args))\n  },\n  info(...args: unknown[]) {\n    console.log(chalk.cyan(...args))\n  },\n  success(...args: unknown[]) {\n    console.log(chalk.green(...args))\n  },\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}