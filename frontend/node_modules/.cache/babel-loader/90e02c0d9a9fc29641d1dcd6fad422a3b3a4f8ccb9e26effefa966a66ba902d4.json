{"ast":null,"code":"import process from 'node:process';\nimport readline from 'node:readline';\nimport { BufferListStream } from 'bl';\nconst ASCII_ETX_CODE = 0x03; // Ctrl+C emits this code\n\nclass StdinDiscarder {\n  #requests = 0;\n  #mutedStream = new BufferListStream();\n  #ourEmit;\n  #rl;\n  constructor() {\n    this.#mutedStream.pipe(process.stdout);\n    const self = this; // eslint-disable-line unicorn/no-this-assignment\n    this.#ourEmit = function (event, data, ...arguments_) {\n      const {\n        stdin\n      } = process;\n      if (self.#requests > 0 || stdin.emit === self.#ourEmit) {\n        if (event === 'keypress') {\n          // Fixes readline behavior\n          return;\n        }\n        if (event === 'data' && data.includes(ASCII_ETX_CODE)) {\n          process.emit('SIGINT');\n        }\n        Reflect.apply(self.#ourEmit, this, [event, data, ...arguments_]);\n      } else {\n        Reflect.apply(process.stdin.emit, this, [event, data, ...arguments_]);\n      }\n    };\n  }\n  start() {\n    this.#requests++;\n    if (this.#requests === 1) {\n      this._realStart();\n    }\n  }\n  stop() {\n    if (this.#requests <= 0) {\n      throw new Error('`stop` called more times than `start`');\n    }\n    this.#requests--;\n    if (this.#requests === 0) {\n      this._realStop();\n    }\n  }\n\n  // TODO: Use private methods when targeting Node.js 14.\n  _realStart() {\n    // No known way to make it work reliably on Windows\n    if (process.platform === 'win32') {\n      return;\n    }\n    this.#rl = readline.createInterface({\n      input: process.stdin,\n      output: this.#mutedStream\n    });\n    this.#rl.on('SIGINT', () => {\n      if (process.listenerCount('SIGINT') === 0) {\n        process.emit('SIGINT');\n      } else {\n        this.#rl.close();\n        process.kill(process.pid, 'SIGINT');\n      }\n    });\n  }\n  _realStop() {\n    if (process.platform === 'win32') {\n      return;\n    }\n    this.#rl.close();\n    this.#rl = undefined;\n  }\n}\nconst stdinDiscarder = new StdinDiscarder();\nexport default stdinDiscarder;","map":{"version":3,"names":["process","readline","BufferListStream","ASCII_ETX_CODE","StdinDiscarder","requests","mutedStream","ourEmit","rl","constructor","pipe","stdout","self","event","data","arguments_","stdin","emit","includes","Reflect","apply","start","_realStart","stop","Error","_realStop","platform","createInterface","input","output","on","listenerCount","close","kill","pid","undefined","stdinDiscarder"],"sources":["/Users/vaibhavh/Desktop/connectVerse/connect-verse-frontend/node_modules/stdin-discarder/index.js"],"sourcesContent":["import process from 'node:process';\nimport readline from 'node:readline';\nimport {BufferListStream} from 'bl';\n\nconst ASCII_ETX_CODE = 0x03; // Ctrl+C emits this code\n\nclass StdinDiscarder {\n\t#requests = 0;\n\t#mutedStream = new BufferListStream();\n\t#ourEmit;\n\t#rl;\n\n\tconstructor() {\n\t\tthis.#mutedStream.pipe(process.stdout);\n\n\t\tconst self = this; // eslint-disable-line unicorn/no-this-assignment\n\t\tthis.#ourEmit = function (event, data, ...arguments_) {\n\t\t\tconst {stdin} = process;\n\t\t\tif (self.#requests > 0 || stdin.emit === self.#ourEmit) {\n\t\t\t\tif (event === 'keypress') { // Fixes readline behavior\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (event === 'data' && data.includes(ASCII_ETX_CODE)) {\n\t\t\t\t\tprocess.emit('SIGINT');\n\t\t\t\t}\n\n\t\t\t\tReflect.apply(self.#ourEmit, this, [event, data, ...arguments_]);\n\t\t\t} else {\n\t\t\t\tReflect.apply(process.stdin.emit, this, [event, data, ...arguments_]);\n\t\t\t}\n\t\t};\n\t}\n\n\tstart() {\n\t\tthis.#requests++;\n\n\t\tif (this.#requests === 1) {\n\t\t\tthis._realStart();\n\t\t}\n\t}\n\n\tstop() {\n\t\tif (this.#requests <= 0) {\n\t\t\tthrow new Error('`stop` called more times than `start`');\n\t\t}\n\n\t\tthis.#requests--;\n\n\t\tif (this.#requests === 0) {\n\t\t\tthis._realStop();\n\t\t}\n\t}\n\n\t// TODO: Use private methods when targeting Node.js 14.\n\t_realStart() {\n\t\t// No known way to make it work reliably on Windows\n\t\tif (process.platform === 'win32') {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.#rl = readline.createInterface({\n\t\t\tinput: process.stdin,\n\t\t\toutput: this.#mutedStream,\n\t\t});\n\n\t\tthis.#rl.on('SIGINT', () => {\n\t\t\tif (process.listenerCount('SIGINT') === 0) {\n\t\t\t\tprocess.emit('SIGINT');\n\t\t\t} else {\n\t\t\t\tthis.#rl.close();\n\t\t\t\tprocess.kill(process.pid, 'SIGINT');\n\t\t\t}\n\t\t});\n\t}\n\n\t_realStop() {\n\t\tif (process.platform === 'win32') {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.#rl.close();\n\t\tthis.#rl = undefined;\n\t}\n}\n\nconst stdinDiscarder = new StdinDiscarder();\n\nexport default stdinDiscarder;\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,cAAc;AAClC,OAAOC,QAAQ,MAAM,eAAe;AACpC,SAAQC,gBAAgB,QAAO,IAAI;AAEnC,MAAMC,cAAc,GAAG,IAAI,CAAC,CAAC;;AAE7B,MAAMC,cAAc,CAAC;EACpB,CAACC,QAAQ,GAAG,CAAC;EACb,CAACC,WAAW,GAAG,IAAIJ,gBAAgB,CAAC,CAAC;EACrC,CAACK,OAAO;EACR,CAACC,EAAE;EAEHC,WAAWA,CAAA,EAAG;IACb,IAAI,CAAC,CAACH,WAAW,CAACI,IAAI,CAACV,OAAO,CAACW,MAAM,CAAC;IAEtC,MAAMC,IAAI,GAAG,IAAI,CAAC,CAAC;IACnB,IAAI,CAAC,CAACL,OAAO,GAAG,UAAUM,KAAK,EAAEC,IAAI,EAAE,GAAGC,UAAU,EAAE;MACrD,MAAM;QAACC;MAAK,CAAC,GAAGhB,OAAO;MACvB,IAAIY,IAAI,CAAC,CAACP,QAAQ,GAAG,CAAC,IAAIW,KAAK,CAACC,IAAI,KAAKL,IAAI,CAAC,CAACL,OAAO,EAAE;QACvD,IAAIM,KAAK,KAAK,UAAU,EAAE;UAAE;UAC3B;QACD;QAEA,IAAIA,KAAK,KAAK,MAAM,IAAIC,IAAI,CAACI,QAAQ,CAACf,cAAc,CAAC,EAAE;UACtDH,OAAO,CAACiB,IAAI,CAAC,QAAQ,CAAC;QACvB;QAEAE,OAAO,CAACC,KAAK,CAACR,IAAI,CAAC,CAACL,OAAO,EAAE,IAAI,EAAE,CAACM,KAAK,EAAEC,IAAI,EAAE,GAAGC,UAAU,CAAC,CAAC;MACjE,CAAC,MAAM;QACNI,OAAO,CAACC,KAAK,CAACpB,OAAO,CAACgB,KAAK,CAACC,IAAI,EAAE,IAAI,EAAE,CAACJ,KAAK,EAAEC,IAAI,EAAE,GAAGC,UAAU,CAAC,CAAC;MACtE;IACD,CAAC;EACF;EAEAM,KAAKA,CAAA,EAAG;IACP,IAAI,CAAC,CAAChB,QAAQ,EAAE;IAEhB,IAAI,IAAI,CAAC,CAACA,QAAQ,KAAK,CAAC,EAAE;MACzB,IAAI,CAACiB,UAAU,CAAC,CAAC;IAClB;EACD;EAEAC,IAAIA,CAAA,EAAG;IACN,IAAI,IAAI,CAAC,CAAClB,QAAQ,IAAI,CAAC,EAAE;MACxB,MAAM,IAAImB,KAAK,CAAC,uCAAuC,CAAC;IACzD;IAEA,IAAI,CAAC,CAACnB,QAAQ,EAAE;IAEhB,IAAI,IAAI,CAAC,CAACA,QAAQ,KAAK,CAAC,EAAE;MACzB,IAAI,CAACoB,SAAS,CAAC,CAAC;IACjB;EACD;;EAEA;EACAH,UAAUA,CAAA,EAAG;IACZ;IACA,IAAItB,OAAO,CAAC0B,QAAQ,KAAK,OAAO,EAAE;MACjC;IACD;IAEA,IAAI,CAAC,CAAClB,EAAE,GAAGP,QAAQ,CAAC0B,eAAe,CAAC;MACnCC,KAAK,EAAE5B,OAAO,CAACgB,KAAK;MACpBa,MAAM,EAAE,IAAI,CAAC,CAACvB;IACf,CAAC,CAAC;IAEF,IAAI,CAAC,CAACE,EAAE,CAACsB,EAAE,CAAC,QAAQ,EAAE,MAAM;MAC3B,IAAI9B,OAAO,CAAC+B,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;QAC1C/B,OAAO,CAACiB,IAAI,CAAC,QAAQ,CAAC;MACvB,CAAC,MAAM;QACN,IAAI,CAAC,CAACT,EAAE,CAACwB,KAAK,CAAC,CAAC;QAChBhC,OAAO,CAACiC,IAAI,CAACjC,OAAO,CAACkC,GAAG,EAAE,QAAQ,CAAC;MACpC;IACD,CAAC,CAAC;EACH;EAEAT,SAASA,CAAA,EAAG;IACX,IAAIzB,OAAO,CAAC0B,QAAQ,KAAK,OAAO,EAAE;MACjC;IACD;IAEA,IAAI,CAAC,CAAClB,EAAE,CAACwB,KAAK,CAAC,CAAC;IAChB,IAAI,CAAC,CAACxB,EAAE,GAAG2B,SAAS;EACrB;AACD;AAEA,MAAMC,cAAc,GAAG,IAAIhC,cAAc,CAAC,CAAC;AAE3C,eAAegC,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}