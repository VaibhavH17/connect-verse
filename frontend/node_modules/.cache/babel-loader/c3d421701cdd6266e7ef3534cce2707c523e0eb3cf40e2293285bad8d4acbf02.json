{"ast":null,"code":"import process from 'node:process';\nimport path from 'node:path';\nimport { fileURLToPath } from 'node:url';\nimport pathKey from 'path-key';\nexport const npmRunPath = ({\n  cwd = process.cwd(),\n  path: pathOption = process.env[pathKey()],\n  preferLocal = true,\n  execPath = process.execPath,\n  addExecPath = true\n} = {}) => {\n  const cwdString = cwd instanceof URL ? fileURLToPath(cwd) : cwd;\n  const cwdPath = path.resolve(cwdString);\n  const result = [];\n  if (preferLocal) {\n    applyPreferLocal(result, cwdPath);\n  }\n  if (addExecPath) {\n    applyExecPath(result, execPath, cwdPath);\n  }\n  return [...result, pathOption].join(path.delimiter);\n};\nconst applyPreferLocal = (result, cwdPath) => {\n  let previous;\n  while (previous !== cwdPath) {\n    result.push(path.join(cwdPath, 'node_modules/.bin'));\n    previous = cwdPath;\n    cwdPath = path.resolve(cwdPath, '..');\n  }\n};\n\n// Ensure the running `node` binary is used\nconst applyExecPath = (result, execPath, cwdPath) => {\n  const execPathString = execPath instanceof URL ? fileURLToPath(execPath) : execPath;\n  result.push(path.resolve(cwdPath, execPathString, '..'));\n};\nexport const npmRunPathEnv = ({\n  env = process.env,\n  ...options\n} = {}) => {\n  env = {\n    ...env\n  };\n  const pathName = pathKey({\n    env\n  });\n  options.path = env[pathName];\n  env[pathName] = npmRunPath(options);\n  return env;\n};","map":{"version":3,"names":["process","path","fileURLToPath","pathKey","npmRunPath","cwd","pathOption","env","preferLocal","execPath","addExecPath","cwdString","URL","cwdPath","resolve","result","applyPreferLocal","applyExecPath","join","delimiter","previous","push","execPathString","npmRunPathEnv","options","pathName"],"sources":["/Users/vaibhavh/Desktop/connectVerse/connect-verse-frontend/node_modules/@shadcn/ui/node_modules/npm-run-path/index.js"],"sourcesContent":["import process from 'node:process';\nimport path from 'node:path';\nimport {fileURLToPath} from 'node:url';\nimport pathKey from 'path-key';\n\nexport const npmRunPath = ({\n\tcwd = process.cwd(),\n\tpath: pathOption = process.env[pathKey()],\n\tpreferLocal = true,\n\texecPath = process.execPath,\n\taddExecPath = true,\n} = {}) => {\n\tconst cwdString = cwd instanceof URL ? fileURLToPath(cwd) : cwd;\n\tconst cwdPath = path.resolve(cwdString);\n\tconst result = [];\n\n\tif (preferLocal) {\n\t\tapplyPreferLocal(result, cwdPath);\n\t}\n\n\tif (addExecPath) {\n\t\tapplyExecPath(result, execPath, cwdPath);\n\t}\n\n\treturn [...result, pathOption].join(path.delimiter);\n};\n\nconst applyPreferLocal = (result, cwdPath) => {\n\tlet previous;\n\n\twhile (previous !== cwdPath) {\n\t\tresult.push(path.join(cwdPath, 'node_modules/.bin'));\n\t\tprevious = cwdPath;\n\t\tcwdPath = path.resolve(cwdPath, '..');\n\t}\n};\n\n// Ensure the running `node` binary is used\nconst applyExecPath = (result, execPath, cwdPath) => {\n\tconst execPathString = execPath instanceof URL ? fileURLToPath(execPath) : execPath;\n\tresult.push(path.resolve(cwdPath, execPathString, '..'));\n};\n\nexport const npmRunPathEnv = ({env = process.env, ...options} = {}) => {\n\tenv = {...env};\n\n\tconst pathName = pathKey({env});\n\toptions.path = env[pathName];\n\tenv[pathName] = npmRunPath(options);\n\n\treturn env;\n};\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,cAAc;AAClC,OAAOC,IAAI,MAAM,WAAW;AAC5B,SAAQC,aAAa,QAAO,UAAU;AACtC,OAAOC,OAAO,MAAM,UAAU;AAE9B,OAAO,MAAMC,UAAU,GAAGA,CAAC;EAC1BC,GAAG,GAAGL,OAAO,CAACK,GAAG,CAAC,CAAC;EACnBJ,IAAI,EAAEK,UAAU,GAAGN,OAAO,CAACO,GAAG,CAACJ,OAAO,CAAC,CAAC,CAAC;EACzCK,WAAW,GAAG,IAAI;EAClBC,QAAQ,GAAGT,OAAO,CAACS,QAAQ;EAC3BC,WAAW,GAAG;AACf,CAAC,GAAG,CAAC,CAAC,KAAK;EACV,MAAMC,SAAS,GAAGN,GAAG,YAAYO,GAAG,GAAGV,aAAa,CAACG,GAAG,CAAC,GAAGA,GAAG;EAC/D,MAAMQ,OAAO,GAAGZ,IAAI,CAACa,OAAO,CAACH,SAAS,CAAC;EACvC,MAAMI,MAAM,GAAG,EAAE;EAEjB,IAAIP,WAAW,EAAE;IAChBQ,gBAAgB,CAACD,MAAM,EAAEF,OAAO,CAAC;EAClC;EAEA,IAAIH,WAAW,EAAE;IAChBO,aAAa,CAACF,MAAM,EAAEN,QAAQ,EAAEI,OAAO,CAAC;EACzC;EAEA,OAAO,CAAC,GAAGE,MAAM,EAAET,UAAU,CAAC,CAACY,IAAI,CAACjB,IAAI,CAACkB,SAAS,CAAC;AACpD,CAAC;AAED,MAAMH,gBAAgB,GAAGA,CAACD,MAAM,EAAEF,OAAO,KAAK;EAC7C,IAAIO,QAAQ;EAEZ,OAAOA,QAAQ,KAAKP,OAAO,EAAE;IAC5BE,MAAM,CAACM,IAAI,CAACpB,IAAI,CAACiB,IAAI,CAACL,OAAO,EAAE,mBAAmB,CAAC,CAAC;IACpDO,QAAQ,GAAGP,OAAO;IAClBA,OAAO,GAAGZ,IAAI,CAACa,OAAO,CAACD,OAAO,EAAE,IAAI,CAAC;EACtC;AACD,CAAC;;AAED;AACA,MAAMI,aAAa,GAAGA,CAACF,MAAM,EAAEN,QAAQ,EAAEI,OAAO,KAAK;EACpD,MAAMS,cAAc,GAAGb,QAAQ,YAAYG,GAAG,GAAGV,aAAa,CAACO,QAAQ,CAAC,GAAGA,QAAQ;EACnFM,MAAM,CAACM,IAAI,CAACpB,IAAI,CAACa,OAAO,CAACD,OAAO,EAAES,cAAc,EAAE,IAAI,CAAC,CAAC;AACzD,CAAC;AAED,OAAO,MAAMC,aAAa,GAAGA,CAAC;EAAChB,GAAG,GAAGP,OAAO,CAACO,GAAG;EAAE,GAAGiB;AAAO,CAAC,GAAG,CAAC,CAAC,KAAK;EACtEjB,GAAG,GAAG;IAAC,GAAGA;EAAG,CAAC;EAEd,MAAMkB,QAAQ,GAAGtB,OAAO,CAAC;IAACI;EAAG,CAAC,CAAC;EAC/BiB,OAAO,CAACvB,IAAI,GAAGM,GAAG,CAACkB,QAAQ,CAAC;EAC5BlB,GAAG,CAACkB,QAAQ,CAAC,GAAGrB,UAAU,CAACoB,OAAO,CAAC;EAEnC,OAAOjB,GAAG;AACX,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}